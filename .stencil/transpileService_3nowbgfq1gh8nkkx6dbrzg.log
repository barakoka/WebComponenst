{"moduleFile":{"sourceFilePath":"/home/kostia/WebComponents/src/components/side-drawer/side-drawer.tsx","jsFilePath":"/home/kostia/WebComponents/src/components/side-drawer/side-drawer.js","cmps":[{"isLegacy":false,"tagName":"keepit-side-drawer","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"SideDrawer","elementRef":null,"encapsulation":"shadow","properties":[{"name":"titleName","type":"string","attribute":"title","reflect":true,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string","resolved":"string","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"open","type":"boolean","attribute":"open","reflect":true,"mutable":true,"required":false,"optional":false,"complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[{"name":"showContact"}],"methods":[{"name":"makeOpen","docs":{"text":"","tags":[]},"complexType":{"signature":"() => Promise<void>","parameters":[],"references":{"Promise":{"location":"global"}},"return":"Promise<void>"},"internal":false}],"listeners":[],"events":[],"watchers":[],"styles":[{"modeName":"$","styleId":"KEEPIT-SIDE-DRAWER","styleStr":null,"styleIdentifier":null,"compiledStyleText":null,"compiledStyleTextScoped":null,"compiledStyleTextScopedCommented":null,"externalStyles":[{"absolutePath":"/home/kostia/WebComponents/src/components/side-drawer/side-drawer.css","relativePath":"./side-drawer.css","originalComponentPath":"./side-drawer.css"}]}],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/home/kostia/WebComponents/src/components/side-drawer/side-drawer.js","sourceFilePath":"/home/kostia/WebComponents/src/components/side-drawer/side-drawer.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":false,"hasComponentShouldUpdateFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":false,"hasDisconnectedCallbackFn":false,"hasElement":false,"hasEvent":false,"hasLifecycle":false,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":true,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":false,"hasPropBoolean":true,"hasPropString":true,"hasPropMutable":true,"hasReflect":true,"hasRenderFn":true,"hasState":true,"hasStyle":true,"hasVdomAttribute":true,"hasVdomXlink":false,"hasVdomClass":true,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":true,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":false,"hasVdomText":true,"hasWatchCallback":false,"isPlain":false,"htmlAttrNames":["id","href","onClick","class"],"htmlTagNames":["slot","div","h2","p","ul","li","a","aside","header","button","h1","section","main"],"isUpdateable":true,"potentialCmpRefs":[]}],"coreRuntimeApis":[],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":false,"hasVdomXlink":false,"hasVdomClass":false,"hasVdomFunctional":false,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":false,"hasVdomStyle":false,"hasVdomText":false,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"originalImports":["@stencil/core"],"potentialCmpRefs":[]},"jsText":"import { h } from \"@stencil/core\";\r\nexport class SideDrawer {\r\n    constructor() {\r\n        this.showContact = false;\r\n    }\r\n    onCloseDrawer() {\r\n        this.open = false;\r\n    }\r\n    onContentChange(content) {\r\n        this.showContact = content === 'contact';\r\n    }\r\n    async makeOpen() {\r\n        this.open = true;\r\n    }\r\n    render() {\r\n        let mainContent = h(\"slot\", null);\r\n        if (this.showContact) {\r\n            mainContent = (h(\"div\", { id: \"contact-information\" },\r\n                h(\"h2\", null, \"Contact Information\"),\r\n                h(\"p\", null, \"Your cant reach us via phone or email.\"),\r\n                h(\"ul\", null,\r\n                    h(\"li\", null, \"Phone: 1234567890\"),\r\n                    h(\"li\", null,\r\n                        \"Email:\",\r\n                        h(\"a\", { href: \"mailto:something@something.com\" }, \"something@something.com\")))));\r\n        }\r\n        let content = (h(\"aside\", null,\r\n            h(\"header\", null,\r\n                h(\"button\", { onClick: this.onCloseDrawer.bind(this) }, \"X\"),\r\n                h(\"h1\", null, this.titleName)),\r\n            h(\"section\", { id: \"tabs\" },\r\n                h(\"button\", { class: this.showContact ? '' : 'active', onClick: this.onContentChange.bind(this, 'nav') }, \"Navigation\"),\r\n                h(\"button\", { class: this.showContact ? 'active' : '', onClick: this.onContentChange.bind(this, 'contact') }, \"Contact\")),\r\n            h(\"main\", null, mainContent)));\r\n        return content;\r\n    }\r\n    static get is() { return \"keepit-side-drawer\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get originalStyleUrls() { return {\r\n        \"$\": [\"./side-drawer.css\"]\r\n    }; }\r\n    static get styleUrls() { return {\r\n        \"$\": [\"side-drawer.css\"]\r\n    }; }\r\n    static get properties() { return {\r\n        \"titleName\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string\",\r\n                \"resolved\": \"string\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"title\",\r\n            \"reflect\": true\r\n        },\r\n        \"open\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": true,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"open\",\r\n            \"reflect\": true\r\n        }\r\n    }; }\r\n    static get states() { return {\r\n        \"showContact\": {}\r\n    }; }\r\n    static get methods() { return {\r\n        \"makeOpen\": {\r\n            \"complexType\": {\r\n                \"signature\": \"() => Promise<void>\",\r\n                \"parameters\": [],\r\n                \"references\": {\r\n                    \"Promise\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                },\r\n                \"return\": \"Promise<void>\"\r\n            },\r\n            \"docs\": {\r\n                \"text\": \"\",\r\n                \"tags\": []\r\n            }\r\n        }\r\n    }; }\r\n}\r\n"}